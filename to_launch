sudo ip link set can0 up type can bitrate 1000000
sudo ifconfig can0 txqueuelen 65536
sudo ifconfig can0 up

----------------------

Terminals:

- ~/autofork_ws (for launching and building) (RPi):
  - bash ~/autofork_ws/startup_sequence.sh
  - colcon build --symlink-install --packages-select motor_launch motor_control motor_description

- ~/autofork_ws/Motor_CAN_Tester (for pulling changes) (RPi):
  - git pull

- ~ (localization) (PC):
  - ros2 launch nav2_bringup localization_launch.py map:=/home/hustler/map_tests/test_map_1/test_map_1.yaml

- ~ (navigation) (PC):
  - ros2 launch nav2_bringup navigation_launch.py

- ~ (rviz2) (PC):
  - rviz2 (using the saved rviz config file)

- ~ (manual control - for now, without stamped cmd_vel) (PC):
  - ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap /cmd_vel:=/tri_cycle_controller/cmd_vel/unstamped

---

For SLAM:

- ros2 launch slam_toolbox online_async_launch.py use_sim_time:=false (should work on PI) (QoS issue | Synchronization using chrony among all devices)

Save the map:

- ros2 service call /slam_toolbox/save_map slam_toolbox/srv/SaveMap {name: {data: "test_map_1"}}



---------

Prev bash file:

#!/bin/bash

# Script to run ROS2 motor control, services, driver, and TF publisher in sequence
# All commands run in background with suppressed output
# Ctrl+C triggers cleanup of all background processes
# Usage: bash startup_sequence.sh
# Make it executable: chmod +x startup_sequence.sh

# Function to clean up background processes on Ctrl+C
cleanup() {
    echo ""
    echo "=== Closing ROS2 Sequence ==="
    # Kill all background processes started by this script
    kill $(jobs -p) 2>/dev/null
    exit 0
}

# Trap Ctrl+C (SIGINT) and call cleanup function
trap cleanup SIGINT

# Source the ROS2 workspace (assuming script is in workspace root)
cd ~/autofork_ws
source install/setup.bash

echo "=== Starting ROS2 Sequence (Workspace Sourced) ==="
echo "All commands will run in background with no output shown. Press Ctrl+C to stop all processes."

# 1. Launch motor control (backgrounded, suppressed output)
echo "1. Launching motor control in background..."
ros2 launch motor_launch ros2_control_move.launch.py > /dev/null 2>&1 &
echo "Motor control launched. Waiting 8 seconds for initialization..."
sleep 8

# 2. Traction motor services (backgrounded, with 2s wait after each)
echo "2. Calling traction motor services in background..."

echo "   - NMT Start"
ros2 service call /traction_motor/nmt_start_node std_srvs/srv/Trigger "{}" > /dev/null 2>&1 &
sleep 3

echo "   - Init"
ros2 service call /traction_motor/init std_srvs/srv/Trigger "{}" > /dev/null 2>&1 &
sleep 3

echo "   - Velocity Mode"
ros2 service call /traction_motor/velocity_mode std_srvs/srv/Trigger "{}" > /dev/null 2>&1 &
sleep 3

# 3. Position motor services (backgrounded, with 2s wait after each)
echo "3. Calling position motor services in background..."

echo "   - NMT Start"
ros2 service call /steering_motor/nmt_start_node std_srvs/srv/Trigger "{}" > /dev/null 2>&1 &
sleep 3

echo "   - Init"
ros2 service call /steering_motor/init std_srvs/srv/Trigger "{}" > /dev/null 2>&1 &
sleep 3

echo "   - Position Mode"
ros2 service call /steering_motor/position_mode std_srvs/srv/Trigger "{}" > /dev/null 2>&1 &
sleep 3

# 4. Launch PF Driver (backgrounded, suppressed output)
echo "4. Launching PF Driver (R2000) in background..."
ros2 launch pf_driver r2000.launch.py > /dev/null 2>&1 &
echo "PF Driver launched. Waiting 4 seconds for initialization..."
sleep 4

# 5. Static Transform Publisher (backgrounded, suppressed output)
echo "5. Starting Static Transform Publisher in background..."
ros2 run tf2_ros static_transform_publisher --x 0.037 --y 0.0 --z 0.75 --qx 0.0 --qy 0.0 --qz 0.0 --qw 1.0 --frame-id base_link --child-frame-id lidar_nav_link

echo "=== Sequence Complete. All processes are running in the background silently. ==="
echo "Press Ctrl+C to stop all processes."

# Wait for Ctrl+C to keep the script running until interrupted
wait
